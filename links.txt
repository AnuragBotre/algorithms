https://ac.els-cdn.com/S1571066105002264/1-s2.0-S1571066105002264-main.pdf?_tid=866b6b55-ffd1-43c4-b1af-ec274c395f4f&acdnat=1530186473_f57269d0eaf605b15dc0e9a2dcecd790
Refactoring Towards a Layered Architecture
        In this paper we present how refactoring of object-oriented programs can be accomplished by
        using formal refinement. Our approach is based on the use of refactoring rules designed for a
        sequential object-oriented language of refinement (rool) similar to Java. We define a strategy
        that aims at structuring programs according to a layered architecture that involves the application
        of refactoring rules, object-oriented programming laws, and data and algorithm refinement. As the
        laws are proved in a weakest precondition semantics of rool, correctness of refactoring is ensured
        by construction.

https://andrewbridge.wordpress.com/2013/01/28/refactoring-code-in-to-an-object-oriented-paradigm/
http://pl.cs.jhu.edu/oose/lectures/refactoring.shtml

http://www.laputan.org/pub/papers/opdyke-thesis.pdf
- Refactoring to Object Oriented Frameworks

IDEA Font settings
Line Spacing - 1.2
Font Size - 14

https://github.com/jankotek/JDBM3
    -

https://github.com/lmdbjava/lmdbjava
    -


https://github.com/kamranahmedse/design-patterns-for-humans
    - Ultra-simplified explanation to design patterns!

https://github.com/linkedin/PalDB
    In Memory Database
    Very Less code easy to study.

https://refactoring.guru/refactoring/how-to


https://www.hackerrank.com/challenges/the-power-sum

http://druid.io/druid.html

http://vldb.org/pvldb/vol5/p1436_alexanderhall_vldb2012.pdf
        Processing a Trillion Cells per Mouse Click
        Alexander Hall, Olaf Bachmann, Robert Bussow, Silviu G ¨ anceanu, Marc Nunkesser ˘
        Google, Inc.
        {alexhall, olafb, buessow, silviu, marcnunkesser}@google.com

http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/36632.pdf
        Dremel: Interactive Analysis of Web-Scale Datasets
        Sergey Melnik, Andrey Gubarev, Jing Jing Long, Geoffrey Romer,
        Shiva Shivakumar, Matt Tolton, Theo Vassilakis
        Google, Inc.
        {melnik,andrey,jlong,gromer,shiva,mtolton,theov}@google.com

http://www.javamadesoeasy.com/2016/12/how-to-monitor-and-analyze-garbage.html


https://praveer09.github.io/technology/2015/12/06/understanding-thread-interruption-in-java/
Understanding Thread Interruption in Java


https://github.com/boundary/high-scale-lib
    This is Boundary's fork of Cliff Click's high scale lib.
    We will be maintaining this fork with bug fixes, improvements and versioned builds in maven central.
    They contain datastructers for high concurrency.


https://wiki.sei.cmu.edu/confluence/display/java/LCK07-J.+Avoid+deadlock+by+requesting+and+releasing+locks+in+the+same+order
    - Coding Guidelines
    - Avoid Deadlocks in case of multiple locks.

https://www.jetbrains.com/mps/?fromMenu
Every company is different and has their own needs. You should build your own language to meet the demands of your business if:


Awesome JVM
https://github.com/deephacks/awesome-jvm
A curated list of awesome JVM low level, performance and non-framework related stuff.


https://blog.jooq.org/2016/12/20/jooq-tuesdays-mario-fusco-talks-about-functional-and-declarative-programming/
jOOQ Tuesdays: Mario Fusco Talks About Functional and Declarative Programming

https://github.com/mariofusco/lambdaj