https://github.com/RichardWarburton/slab
http://www.insightfullogic.com/2013/Jan/03/slab-guaranteed-heap-alignment-jvm/
Over time CPU clockrates have gotten considerably faster, but Memory Speed has failed to catch up. In order to make good usage of modern CPUs it's important to consider data structure alignment in memory, in order to work in sympathy with the On-CPU Cache. In other words you want good Locality of Reference.

If you want to store off heap this is the library

       // Define your DataType
        public interface GameEvent extends Cursor {
          public int getId();
          public void setId(int value);
          public long getStrength();
          public void setStrength(long value);
        }
        //This is off heap
        // Create an allocator for your DataType
        Allocator eventAllocator = Allocator.of(GameEvent.class);

        // Allocate 100 off heap GameEvent instances - sequentially in memory
        GameEvent event = eventAllocator.allocate(100);

        // Move to the index of the instance that you want to read from or write to
        event.move(1);

        // set and get values like a normal POJO
        event.setId(6);
        assertEquals(6, event.getId());

http://jadira.sourceforge.net/
Usertype
User Types and classes for use with Hibernate. Includes user types for use with the javax.time classes included in the early review class of JSR 310. Where possible these types are compatible with the equivalent Joda Time - Hibernate user types.
User Types includes user types for Joda Time. These are designed for interoperability wherever possible with the provided JSR 310 user types. These can be used as an alternative to Joda Time Contrib's persistent types. The motivation for creating these types is the original types are affected by an issue whereby the written time is offset by the user's offset from the database zone.
User Type includes other user types - for enums, JDK types and Libphonenum.

Bindings
Bindings is a library supporting a variety of methods for defining bindings between classes and their String representation

Cloning
Cloning provides fast deep cloning capabilities for almost any Java object.


http://www.kdgregory.com/programming/java/ByteBuffer_JUG_Presentation.pdf
Philadelphia Java Users Group

https://medium.com/@esaliya/fast-inter-process-communication-over-shared-memory-for-java-big-data-applications-6f1beb81f910
Fast Inter-Process Communication over Shared Memory for Java Big Data Applications


https://stackoverflow.com/questions/7060215/how-can-i-get-the-memory-location-of-a-object-in-java
I want to know the location that JVM allocates to objects being placed in the system memory.


https://github.com/EsotericSoftware/kryo
Fast Serialization
Popular high-performance libraries


http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/
Java Magic. Part 4: sun.misc.Unsafe
Java is a safe programming language and prevents programmer
from doing a lot of stupid mistakes, most of which based on memory management.
But, there is a way to do such mistakes intentionally, using Unsafe class.


https://github.com/snazy/ohc
OHC - An off-heap-cache


https://github.com/eugenp/tutorials/tree/master/core-java


http://www.baeldung.com/java-unsafe
Sun MISC Unsafce - Examples